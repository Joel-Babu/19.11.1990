package au.wow.main.tests.fcd;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.support.PageFactory;
import org.testng.ITestContext;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.relevantcodes.extentreports.ExtentReports;

import au.wow.main.objects.LoginPageObjects;
import au.wow.main.objects.fcd.SMSJobObjects;
import au.wow.main.objects.fcd.StandardDepartmentObjects;
import au.wow.main.pages.CommonFunctions;
import au.wow.main.pages.LoginPage;
import au.wow.main.pages.fcd.SMSJobPage;
import au.wow.main.pages.fcd.StandardDepartmentPage;
import au.wow.sms.utils.BasePage;
import au.wow.sms.utils.CommonRepository;
import au.wow.sms.utils.CustomExtentReports;
import au.wow.sms.utils.ExtentReportsScreenshotCode;
import au.wow.sms.utils.SQLWrapper;
import au.wow.sms.utils.TestBase;
import au.wow.sms.utils.TestStatus;
import au.wow.sms.utils.XMLDataReader;

public class SMSJob extends TestBase {
	private static final SMSJobObjects SMSJobObjects = null;
	protected Logger log = LogManager.getLogger(SMSJob.class);
	TestStatus status;
	ExtentReportsScreenshotCode ScreenShotUtil;
	SQLWrapper sql = new SQLWrapper(log);
	CommonFunctions objCommonFunctions;
	LoginPage objLoginPage;
	LoginPageObjects objLoginPageObjects;
	CommonRepository CommonFunc;
	SMSJobObjects objSMSJobObjects;
	SMSJobPage objSMSJobPage;
	String MenuSelection;
	List<List<Object>> UIValues;
	BasePage BaseObj;
	List<List<Object>> DBSMSJobEdit,DBSMSJobEditstorespecific,DBSMSJobremoveglobal,DBSMSJobremovestorespecific; 

	public SMSJob() {
		super.log = log;
	}

	/**
	 * LogintoApplication: Logging into SMS Application
	 * 
	 * @throws Exception
	 */

	@Test(description = "Logging into SMS Application", priority = 0)
	public void LoginApplication() throws Exception {
		extentTest = report.startTest("Application Login - HomePage verification");		
		objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
		objLoginPage.enterUserCredentials(getContext().getStringProperty("SMSUserType"));
		waitFor(3);
		objLoginPage.VerifySignIn(objLoginPageObjects, extentTest, getContext().getStringProperty("WelcomeName"));
	}

	// Search the SMS Job-Global

	@Test(description = "Searching the SMS Job-Global with filter criteria", priority = 1)
	public void Search_Global() throws Exception {
		extentTest = report.startTest("Searching the SMS Job-GLOBAL");
		objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
		objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
		objSMSJobPage= new SMSJob().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), SMSJobPage.class);
		
		
		
		objCommonFunctions.verifyMenuSelection(objLoginPageObjects, extentTest,getContext().getStringProperty("MenuSelection"), getContext().getStringProperty("SubSMSMenu5"),
				LoginPageObjects.smsSubMenuCount, LoginPageObjects.smsSubMenu, LoginPageObjects.smsMenuExpand);
		
		objCommonFunctions.clickButton(LoginPageObjects.explorerMenuFrame, LoginPageObjects.smsJob, extentTest, "clicking on SMS Job");
		waitFor(3);
		objSMSJobPage.Search(objSMSJobObjects,SMSJobObjects.tradingDepartment,getContext().getStringProperty("tradingDepartment"),extentTest);	
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.search, extentTest, "clicking on search Button");

	}
	
	
	
	
	 // Search the SMS Job-Store Specific

	@Test(description = "Search of SMS Job-store Specific with filter criteria", priority = 2)
	public void SearchStoreSpecific() throws Exception {
		extentTest = report.startTest("Searching the SMS Job-store Specific");
		objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
		objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
		objSMSJobPage= new SMSJob().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), SMSJobPage.class);
		
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.storeSpecific, extentTest, "clicking on store Specific Button");
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.storeNodropdownbutton, extentTest, "clicking on StoreNo Button");
		// Get Parent window handle
		String winHandleBefore = driver1.getWindowHandle();
		for (String winHandle : driver1.getWindowHandles()) {
			// Switch to child window
			driver1.switchTo().window(winHandle);
		}
	String winHandleAfter = driver1.getWindowHandle();
		objSMSJobPage.LMSSearch(objSMSJobObjects,SMSJobObjects.region,getContext().getStringProperty("Region"),SMSJobObjects.area,getContext().getStringProperty("Area"),extentTest);	
		objCommonFunctions.clickButtonWithoutFrame(SMSJobObjects.search, extentTest, "clicking on search Button");
		waitFor(3);
		objCommonFunctions.clickButtonWithoutFrame(SMSJobObjects.lmsStorenumber, extentTest, "Selecting one store member");
		waitFor(3);
		//objCommonFunctions.clickButtonWithoutFrame(SMSJobObjects.closebutton, extentTest, "clicking on close button");
	
		driver1.switchTo().window(winHandleBefore);
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.search, extentTest, "clicking on search Button");
	}
	
	
	 
	//Edit the SMS Job-Global

		@Test(description = "Editing SMS Job-GLOBAL with filter criteria", priority = 3)
	public void Edit_Global() throws Exception {
		extentTest = report.startTest("Editing SMS Job-GLOBAL");
		objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
		objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
		objSMSJobPage= new SMSJob().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), SMSJobPage.class);


	objSMSJobPage.Search(objSMSJobObjects,SMSJobObjects.tradingDepartment,getContext().getStringProperty("tradingDepartment"),extentTest);	
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.search, extentTest, "clicking on search Button");
		waitFor(3);
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.edit, extentTest, "clicking on EDIT Button");	
		// Get Parent window handle
				String winHandleBefore = driver1.getWindowHandle();
				for (String winHandle : driver1.getWindowHandles()) {
					// Switch to child window
					driver1.switchTo().window(winHandle);
				}
				String winHandleAfter = driver1.getWindowHandle();
		objSMSJobPage.Edit(objSMSJobObjects,SMSJobObjects.variableType,getContext().getStringProperty("variableType"),extentTest);	
		objCommonFunctions.clickButtonWithoutFrame( SMSJobObjects.save, extentTest, "clicking on SAVE Button");	

		driver1.switchTo().window(winHandleBefore);
		//verifying the data in DB
		String SMSJobEdit = data.getText("SMSJobEdit");
		DBSMSJobEdit = sql.SMSexecuteQuery(getContext(),
				SMSJobEdit.replace("idno", getContext().getStringProperty("SMSJobID"))
				.replace("deptno", getContext().getStringProperty("jobTradingDept")));
		System.out.println("DB Values: " + DBSMSJobEdit);
		
		if (Integer.parseInt(DBSMSJobEdit.get(0).get(0).toString())==1) {
			
			Report_AddStep("testcase", "The SMS Job UI data is matching with DB after editing the Job:  " + getContext().getStringProperty("SMSJobID") + "", "", "", "Pass");
			htmlToExtent(cName, mName, extentTest, driver1,"SMS Job UI & DB data are matching after editing the Job: " + getContext().getStringProperty("SMSJobID") + ";;;Pass");
			}
			
		else
		{		
			Report_AddStep("testcase","The SMS Job UI data is not matching with DB after editing the Job:  " + getContext().getStringProperty("SMSJobID") + "", "", "", "Fail");
			htmlToExtent(cName, mName, extentTest, driver1,"SMS Job UI & DB data are not matching after editing the Job: " + getContext().getStringProperty("SMSJobID") +  ";;;Fail");
			
		}

	}
		
		
		
	

	// Editing the SMS Job-Store Specific

	@Test(description = "Editing SMS Job-store Specific with filter criteria", priority = 4)
	public void Edit_StoreSpecific() throws Exception {
		extentTest = report.startTest("Edit SMS Job-store Specific");
		objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
		objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
		objSMSJobPage= new SMSJob().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), SMSJobPage.class);
		
		
		objSMSJobPage.Search(objSMSJobObjects,SMSJobObjects.tradingDepartment,getContext().getStringProperty("tradingDepartment"),extentTest);	
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.storeSpecific, extentTest, "clicking on store Specific Button");
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.storeNodropdownbutton, extentTest, "clicking on StoreNo Button");
		// Get Parent window handle
		String winHandleBefore = driver1.getWindowHandle();
		for (String winHandle : driver1.getWindowHandles()) {
			// Switch to child window
			driver1.switchTo().window(winHandle);
		}
		String winHandleAfter = driver1.getWindowHandle();
		objSMSJobPage.LMSSearch(objSMSJobObjects,SMSJobObjects.region,getContext().getStringProperty("Region"),SMSJobObjects.area,getContext().getStringProperty("Area"),extentTest);
		objCommonFunctions.enterText(SMSJobObjects.storenumtextbox, getContext().getStringProperty("Lmsstorenumber"));
		objCommonFunctions.clickButtonWithoutFrame(SMSJobObjects.search, extentTest, "clicking on search Button");
	
		waitFor(3);
		objCommonFunctions.clickButtonWithoutFrame(SMSJobObjects.lmsStorenumber, extentTest, "clicking on LMS Storeno Button");
		waitFor(3);
		driver1.switchTo().window(winHandleBefore);
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.search, extentTest, "clicking on search Button");
		waitFor(3);
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.edit, extentTest, "clicking on EDIT Button");	
		// Get Parent window handle
		String winHandleBefore1 = driver1.getWindowHandle();
		for (String winHandle : driver1.getWindowHandles()) {
			// Switch to child window
			driver1.switchTo().window(winHandle);
		}
		String winHandleAfter1 = driver1.getWindowHandle();
		waitFor(3);
		objSMSJobPage.Edit(objSMSJobObjects,SMSJobObjects.variableType,getContext().getStringProperty("variableType"),extentTest);
		waitFor(3);
		objCommonFunctions.clickButtonWithoutFrame( SMSJobObjects.save, extentTest, "clicking on SAVE Button");	

		driver1.switchTo().window(winHandleBefore);
		
		//verifying the data in DB
		String SMSJobEditstorespecific = data.getText("SMSJobEditstorespecific");
		DBSMSJobEditstorespecific = sql.SMSexecuteQuery(getContext(),
				SMSJobEditstorespecific.replace("idno", getContext().getStringProperty("SMSJobID"))
				.replace("deptno", getContext().getStringProperty("jobTradingDept")));
		System.out.println("DB Values: " + DBSMSJobEditstorespecific);
		
		if (Integer.parseInt(DBSMSJobEditstorespecific.get(0).get(0).toString())==1) {
			
			Report_AddStep("testcase", "The SMS Job UI data is matching with DB after editing the Job:  " + getContext().getStringProperty("SMSJobID") + "", "", "", "Pass");
			htmlToExtent(cName, mName, extentTest, driver1,"SMS Job UI & DB data are matching after editing the Job: " + getContext().getStringProperty("SMSJobID") + ";;;Pass");
			}
			
		else
		{		
			Report_AddStep("testcase","The SMS Job UI data is not matching with DB after editing the Job:  " + getContext().getStringProperty("SMSJobID") + "", "", "", "Fail");
			htmlToExtent(cName, mName, extentTest, driver1,"SMS Job UI & DB data are not matching after editing the Job: " + getContext().getStringProperty("SMSJobID") +  ";;;Fail");
			
		}

	}
	
	
	
	//Removing the SMS Job-Global
	
	@Test(description = "Removing SMS Job-Global with filter criteria", priority = 6)
	public void Remove_Global() throws Exception {
		extentTest = report.startTest("Removing the SMS Job-GLOBAL");
		objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
		objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
		objSMSJobPage= new SMSJob().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), SMSJobPage.class);

     
		objSMSJobPage.Search(objSMSJobObjects,SMSJobObjects.tradingDepartment,getContext().getStringProperty("tradingDepartment"),extentTest);	
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.search, extentTest, "clicking on search Button");
		waitFor(3);
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.edit, extentTest, "clicking on EDIT Button");	
		// Get Parent window handle
				String winHandleBefore = driver1.getWindowHandle();
				for (String winHandle : driver1.getWindowHandles()) 
				{
					// Switch to child window
					driver1.switchTo().window(winHandle);
				}
				String winHandleAfter = driver1.getWindowHandle();
		objSMSJobPage.Edit(objSMSJobObjects,SMSJobObjects.variableType,getContext().getStringProperty("variableType"),extentTest);	
		waitFor(3);
		objCommonFunctions.clickButtonWithoutFrame( SMSJobObjects.selectingstoretoremove, extentTest, "clicking on remove TaskID Button");	
		waitFor(3);
		objCommonFunctions.clickButtonWithoutFrame( SMSJobObjects.remove, extentTest, "clicking on remove Button");
		driver1.switchTo().window(winHandleBefore);
		
		//verifying the data in DB
				String SMSJobremoveglobal = data.getText("SMSJobremoveglobal");
				DBSMSJobremoveglobal= sql.SMSexecuteQuery(getContext(),
						SMSJobremoveglobal.replace("idno", getContext().getStringProperty("SMSJobID"))
						.replace("deptno", getContext().getStringProperty("jobTradingDept")));
				System.out.println("DB Values: " + DBSMSJobEdit);
				
				if (Integer.parseInt(DBSMSJobEdit.get(0).get(0).toString())==1) {
					
					Report_AddStep("testcase", "The SMS Job UI data is matching with DB after removing the Job:  " + getContext().getStringProperty("SMSJobID") + "", "", "", "Pass");
					htmlToExtent(cName, mName, extentTest, driver1,"SMS Job UI & DB data are matching after removing the Job: " + getContext().getStringProperty("SMSJobID") + ";;;Pass");
					}
					
				else
				{		
					Report_AddStep("testcase","The SMS Job UI data is not matching with DB after removing the Job:  " + getContext().getStringProperty("SMSJobID") + "", "", "", "Fail");
					htmlToExtent(cName, mName, extentTest, driver1,"SMS Job UI & DB data are not matching after removing the Job: " + getContext().getStringProperty("SMSJobID") +  ";;;Fail");
					
				}
	
	
	}
	
	
	//Remove Store Specific
	
	@Test(description = "Removing SMS Job-store Specific with filter criteria", priority = 7)
	public void Remove_StoreSpecific() throws Exception {
		extentTest = report.startTest("Removing SMS Job-store Specific");
		objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
		objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
		objSMSJobPage= new SMSJob().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), SMSJobPage.class);
		
		
		objSMSJobPage.Search(objSMSJobObjects,SMSJobObjects.tradingDepartment,getContext().getStringProperty("tradingDepartment"),extentTest);	
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.storeSpecific, extentTest, "clicking on store Specific Button");
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.storeNodropdownbutton, extentTest, "clicking on StoreNo Button");
		// Get Parent window handle
		String winHandleBefore = driver1.getWindowHandle();
		for (String winHandle : driver1.getWindowHandles()) {
			// Switch to child window
			driver1.switchTo().window(winHandle);
		}
		String winHandleAfter = driver1.getWindowHandle();
		objSMSJobPage.LMSSearch(objSMSJobObjects,SMSJobObjects.region,getContext().getStringProperty("Region"),SMSJobObjects.area,getContext().getStringProperty("Area"),extentTest);	
		objCommonFunctions.clickButtonWithoutFrame(SMSJobObjects.search, extentTest, "clicking on search Button");
		waitFor(3);
		objCommonFunctions.clickButtonWithoutFrame(SMSJobObjects.lmsStorenumber, extentTest, "clicking on LMS Storeno Button");
		waitFor(3);
		driver1.switchTo().window(winHandleBefore);
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.search, extentTest, "clicking on search Button");
		
		waitFor(3);
		objCommonFunctions.clickButton( SMSJobObjects.frame,SMSJobObjects.edit, extentTest, "clicking on EDIT Button");	
		// Get Parent window handle
		String winHandleBefore1 = driver1.getWindowHandle();
		for (String winHandle : driver1.getWindowHandles()) {
			// Switch to child window
			driver1.switchTo().window(winHandle);
		}
		
		String winHandleAfter1 = driver1.getWindowHandle();
		waitFor(3);
		objSMSJobPage.Edit(objSMSJobObjects,SMSJobObjects.variableType,getContext().getStringProperty("variableType"),extentTest);
		waitFor(3);
		objCommonFunctions.clickButtonWithoutFrame( SMSJobObjects.selectingstoretoremove, extentTest, "clicking on remove TaskID Button");	
		waitFor(3);
		objCommonFunctions.clickButtonWithoutFrame( SMSJobObjects.remove, extentTest, "clicking on remove Button");	

		driver1.switchTo().window(winHandleBefore);

		
		//verifying the data in DB
		String SMSJobremovestorespecific = data.getText("SMSJobremovestorespecific");
		DBSMSJobremovestorespecific = sql.SMSexecuteQuery(getContext(),
				SMSJobremovestorespecific.replace("idno", getContext().getStringProperty("SMSJobID"))
				.replace("deptno", getContext().getStringProperty("jobTradingDept")));
		System.out.println("DB Values: " + DBSMSJobEdit);
		
		if (Integer.parseInt(DBSMSJobEdit.get(0).get(0).toString())==1) {
			
			Report_AddStep("testcase", "The SMS Job UI data is matching with DB after removing the Job:  " + getContext().getStringProperty("SMSJobID") + "", "", "", "Pass");
			htmlToExtent(cName, mName, extentTest, driver1,"SMS Job UI & DB data are matching after removing the Job: " + getContext().getStringProperty("SMSJobID") + ";;;Pass");
			}
			
		else
		{		
			Report_AddStep("testcase","The SMS Job UI data is not matching with DB after removing the Job:  " + getContext().getStringProperty("SMSJobID") + "", "", "", "Fail");
			htmlToExtent(cName, mName, extentTest, driver1,"SMS Job UI & DB data are not matching after removing the Job: " + getContext().getStringProperty("SMSJobID") +  ";;;Fail");
			
		}
	}
	
	

	//Logging out of the Application

	@Test(priority = 9)
	public void LogoutApplication() throws Exception {
		extentTest = report.startTest("Logging out of application");
		objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data, getReport(),getReportLogger(), LoginPage.class);
		objLoginPage.LogOFF(objLoginPageObjects);
	}

	@BeforeTest
	public void InitiateExtentReport() throws Exception {
		report = new ExtentReports(System.getProperty("user.dir") + "\\Reports\\SMSJob.html");
	}

	@AfterTest
	public void CloseExtentReport() throws Exception {
		report.endTest(extentTest);
		report.flush();
	}

	@BeforeMethod
	public void setUpItemPrice(Method m, ITestContext testcontext) throws IOException {

	
		
		System.out.println("test1 - beforemethod");
		mName = m.getName().toString().trim();
		System.out.println(m.getName().toString().trim());
		if (!methodList.contains(m.getName().toString().trim())) {
			methodList.add(m.getName().toString().trim());
			//extentTest = report.startTest(m.getName().toString().trim());
		}
		System.out.println(methodList.size());
		//initializeTestcontext();
		System.out.println("test1 - beforemethod");
		log.info("Loading Testdata for the test case: " + m.getName().toString());
		data.getTCNameFromChildren(m.getName().toString().trim());
		testcontext.setAttribute("WebDriver", getDriver());
		testcontext.setAttribute("Customreports", this.customreport);
		customreport.startTest(m.getName().toString());
		initializeTestStatus();
		reportPath = new File(getContext().getStringProperty("reportPath"));
		moduledesc = m.getName().toString().trim();
		dtmoduledesc = m.getAnnotation(Test.class).description();
		testcasesttime = new Date();
		objCommonFunctions = PageFactory.initElements(this.getDriver(), CommonFunctions.class);
		objLoginPage = PageFactory.initElements(this.getDriver(), LoginPage.class);
		objLoginPageObjects = PageFactory.initElements(this.getDriver(), LoginPageObjects.class);
		objSMSJobObjects = PageFactory.initElements(this.getDriver(), SMSJobObjects.class);
		objSMSJobPage = PageFactory.initElements(this.getDriver(), SMSJobPage.class);
		ScreenShotUtil = PageFactory.initElements(this.getDriver(), ExtentReportsScreenshotCode.class);
		BaseObj = PageFactory.initElements(this.getDriver(), BasePage.class);
		System.out.println(System.getProperty("user.dir"));
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("MMddyyyy_hmmss");
		String formattedDate = sdf.format(date);
		System.out.println(formattedDate); // 12/01/2011 4:48:16 PM
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		String formattedDate1 = dateFormat.format(date);
		System.out.println(formattedDate1); // 12/01/2011 4:48:16 PM
		String dat = formattedDate1;
		Report_Header("testcase", reportPath, moduledesc, dat);

	}

	@BeforeClass
	public void loadXMLFile() {
	
		try {
			cName = this.getClass().getSimpleName();
			reportPath = new File(getContext().getStringProperty("reportPath"));
			report = new ExtentReports(
					getContext().getStringProperty("reportPath") + "\\" + this.getClass().getSimpleName() + ".html");
			classList.add(this.getClass().getSimpleName());
			initializeTestcontext();
			sql.SMSConnectSITDB(context);
				
			System.out.println("test1 - Beforeclass");
			data = new XMLDataReader(log);
			customreport = new CustomExtentReports();
		createDriver(getContext().getStringProperty("SMSUrl"), getContext().getStringProperty("browser"), cName,
					mName, extentTest, driver1);
			log.info("Loading data for the class: ");
			data.loadTestDataXML(System.getProperty("user.dir") + "\\TestData\\SMSApplication\\SMSUItoDBCompare.xml");
			customreport.createExtentReport();
			
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

	}


