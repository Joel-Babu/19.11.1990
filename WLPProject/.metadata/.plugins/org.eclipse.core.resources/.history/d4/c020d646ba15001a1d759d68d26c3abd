package au.wow.main.tests.fcd;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.testng.ITestContext;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.relevantcodes.extentreports.ExtentReports;

import au.wow.main.objects.LoginPageObjects;
import au.wow.main.objects.fcd.EditObjects;
import au.wow.main.objects.fcd.LabourStandardProfilesObjects;
import au.wow.main.objects.fcd.StandardDepartmentObjects;
import au.wow.main.objects.fcd.TaskMaintenanceObjects;
import au.wow.main.objects.fcd.SurveyQuestionReviewObjects;
import au.wow.main.pages.CommonFunctions;
import au.wow.main.pages.LoginPage;
import au.wow.main.pages.fcd.EditPage;
import au.wow.main.pages.fcd.LabourStandardsProfilePage;
import au.wow.main.pages.fcd.StandardDepartmentPage;
import au.wow.main.pages.fcd.SurveyQuestionReviewPage;
import au.wow.main.pages.fcd.TaskMaintenancePage;
import au.wow.sms.utils.BasePage;
import au.wow.sms.utils.CommonRepository;
import au.wow.sms.utils.CustomExtentReports;
import au.wow.sms.utils.ExtentReportsScreenshotCode;
import au.wow.sms.utils.SQLWrapper;
import au.wow.sms.utils.TestBase;
import au.wow.sms.utils.TestStatus;
import au.wow.sms.utils.XMLDataReader;

public class SurveyQuestionReview extends TestBase {
	private static final SurveyQuestionReviewObjects  SurveyQuestionReviewObjects = null;
	protected Logger log = LogManager.getLogger(SurveyQuestionReview.class);
	TestStatus status;
	ExtentReportsScreenshotCode ScreenShotUtil;
	SQLWrapper sql = new SQLWrapper(log);
	CommonFunctions objCommonFunctions;
	LoginPage objLoginPage;
	LoginPageObjects objLoginPageObjects;
	CommonRepository CommonFunc;
	SurveyQuestionReviewObjects objSurveyQuestionReviewObjects;
	SurveyQuestionReviewPage objSurveyQuestionReviewPage;
	EditPage objEditPage;
	EditObjects objEditObjects;
	String MenuSelection;
	List<List<Object>> UIValues,DBSMSSurveyDepts,UIValuesDeptNames,DBValues,UIValuesStdDeptSelected,DBValuesStndDeptSelected;
	BasePage BaseObj;

	public SurveyQuestionReview() {
		super.log = log;
	}

	/**
	 * LogintoApplication: Logging into SMS Application
	 * 
	 * @throws Exception
	 */

	@Test(description = "Logging into SMS Application", priority = 0)
	public void LoginApplication() throws Exception {
		extentTest = report.startTest("Application Login - HomePage verification");		
		objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
		objLoginPage.enterUserCredentials(getContext().getStringProperty("SMSUserType"));
		objLoginPage.VerifySignIn(objLoginPageObjects, extentTest, getContext().getStringProperty("WelcomeName"));
	}


	/**
		Searching on survey question review
	 */

@Test(description = "Search of Survey Question Review with filter criteria", priority = 1)
	public void Search() throws Exception {
		extentTest = report.startTest("Selection of Store Number");
		objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
		objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
		objSurveyQuestionReviewPage= new SurveyQuestionReview().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(),SurveyQuestionReviewPage.class);

		objCommonFunctions.verifyMenuSelection(objLoginPageObjects, extentTest,
				getContext().getStringProperty("MenuSelection"), getContext().getStringProperty("SubSMSMenu9"),
				LoginPageObjects.smsSubMenuCount, LoginPageObjects.smsSubMenu, LoginPageObjects.smsMenuExpand);
		
		objCommonFunctions.clickButton(LoginPageObjects.explorerMenuFrame, LoginPageObjects.SurveyQuestionReview, extentTest, "clicking on Survey Question Review");

		objSurveyQuestionReviewPage.search(objSurveyQuestionReviewObjects,SurveyQuestionReviewObjects.Storeno,extentTest);	

		// Get Parent window handle
		String winHandleBefore = driver1.getWindowHandle();
		for (String winHandle : driver1.getWindowHandles()) {
			// Switch to child window
			driver1.switchTo().window(winHandle);
		}
		// Do some operation on child window and get child window handle.
		String winHandleAfter = driver1.getWindowHandle();
		enterText(SurveyQuestionReviewObjects.storenumber, getContext().getStringProperty("Storeno"));
		
		objSurveyQuestionReviewPage.searchlookup(objSurveyQuestionReviewObjects,SurveyQuestionReviewObjects.StorenoLookup,SurveyQuestionReviewObjects.searchbutton,extentTest);
		// to switch to parent window.
		driver1.switchTo().window(winHandleBefore);
		waitFor(3);
		objCommonFunctions.clickButton(SurveyQuestionReviewObjects.frame,SurveyQuestionReviewObjects.LoadQuestions,extentTest,"Clicking on Load Question");
		
	}
	 



//Editing on survey questions review
	
	@Test(description = "Search of Survey Question Review with filter criteria", priority = 2)
	public void Edit_Question() throws Exception {
		extentTest = report.startTest("Selection of Store Number");
		objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
		objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
		objSurveyQuestionReviewPage= new SurveyQuestionReview().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(),SurveyQuestionReviewPage.class);

//	objCommonFunctions.verifyMenuSelection(objLoginPageObjects, extentTest,
//				getContext().getStringProperty("MenuSelection"), getContext().getStringProperty("SubSMSMenu9"),
//				LoginPageObjects.smsSubMenuCount, LoginPageObjects.smsSubMenu, LoginPageObjects.smsMenuExpand);
//		
//		objCommonFunctions.clickButton(LoginPageObjects.explorerMenuFrame, LoginPageObjects.SurveyQuestionReview, extentTest, "clicking on Survey Question Review");
//		
		waitFor(3);
		objSurveyQuestionReviewPage.search(objSurveyQuestionReviewObjects,SurveyQuestionReviewObjects.Storeno,extentTest);	

		// Get Parent window handle
		String winHandleBefore = driver1.getWindowHandle();
		for (String winHandle : driver1.getWindowHandles()) {
			// Switch to child window
			driver1.switchTo().window(winHandle);
		}
		// Do some operation on child window and get child window handle.
		String winHandleAfter = driver1.getWindowHandle();

		objSurveyQuestionReviewPage.searchlookup(objSurveyQuestionReviewObjects,SurveyQuestionReviewObjects.StorenoLookup,extentTest);
		// to switch to parent window.
		driver1.switchTo().window(winHandleBefore);

		objSurveyQuestionReviewPage.searchLoadQuestion(objSurveyQuestionReviewObjects,SurveyQuestionReviewObjects.LoadQuestions,
				SurveyQuestionReviewObjects.StandardDepartment1,getContext().getStringProperty("StandardDepartment1dropdown"),SurveyQuestionReviewObjects.StandardDepartment2,
				getContext().getStringProperty("StandardDepartment2dropdown"),extentTest);
		waitFor(3);
		objCommonFunctions.clickButtonWithoutFrame(SurveyQuestionReviewObjects.Save, extentTest, "Survey Details have been saved successfully");

	}
	 
	
*/

//Validating all departments headings on survey review question screen

	@Test(description = "Validation of all departments Names on the screen", priority = 2)
	public void validationofdepts() throws Exception {
		extentTest = report.startTest("Validation of departments names on the screen");
		objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
		objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
		objSurveyQuestionReviewPage= new SurveyQuestionReview().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(),SurveyQuestionReviewPage.class);

		UIValuesDeptNames = objSurveyQuestionReviewPage.validationOfDeptNames(SurveyQuestionReviewObjects,extentTest, SurveyQuestionReviewObjects.countofalldept, SurveyQuestionReviewObjects.departmentheading,getContext().getStringProperty("Lastdepartmentname"));
		
		//verifying the data in DB
		String SMSSurveyDepts = data.getText("SMSSurveyDepts");
		DBSMSSurveyDepts = sql.SMSexecuteQuery(getContext(),SMSSurveyDepts);
		System.out.println("DB Values: " + DBSMSSurveyDepts);
		
		
		objSurveyQuestionReviewPage.CompareValues(extentTest, DBSMSSurveyDepts, UIValuesDeptNames);
			
	}
	
	/*  

   //Verifying questions on survey review question screen
	
	@Test(description = "Validation of all departments Questions on the screen", priority = 3)
	public void validationofquestions() throws Exception {
		extentTest = report.startTest("Validation of departments questions on the screen");
		objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
		objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
		objSurveyQuestionReviewPage= new SurveyQuestionReview().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(),SurveyQuestionReviewPage.class);

		UIValues = objSurveyQuestionReviewPage.validationOfDeptQuestions(UIValuesDeptNames,SurveyQuestionReviewObjects,extentTest);
		
		//verifying the data in DB
	    String SMSSurveyDeptQuestions = data.getText("SMSSurveyDeptQuestions");
		DBValues = sql.SMSexecuteQuery(getContext(),SMSSurveyDeptQuestions);
		System.out.println("DB Values: " + DBValues);
		
		
		objSurveyQuestionReviewPage.CompareValuesforTwoDimension(extentTest, DBValues, UIValues);
			
	}
	

	   //Verifying answers on survey review question screen
		
		@Test(description = "Validation of all Answer Options on the screen", priority = 4)
		public void validationofanswers() throws Exception {
			extentTest = report.startTest("Validation of answers of departments on the screen");
			objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
			objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
			objSurveyQuestionReviewPage= new SurveyQuestionReview().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(),SurveyQuestionReviewPage.class);

			UIValues = objSurveyQuestionReviewPage.validationOfDeptAnswers(UIValuesDeptNames,SurveyQuestionReviewObjects,extentTest);
			
			//verifying the data in DB
		    String SMSSurveyDeptAnswers = data.getText("SMSSurveyDeptAnswers");
			DBValues = sql.SMSexecuteQuery(getContext(),SMSSurveyDeptAnswers);
			System.out.println("DB Values: " + DBValues);
			
			
			objSurveyQuestionReviewPage.CompareValuesforTwoDimension(extentTest, DBValues, UIValues);
				
		}
		 


 //Verifying Standard Department on survey review question screen
	
		@Test(description = "Validation of Standard Department on the screen", priority = 5)
		public void validationofstandarddepartmentslist() throws Exception {
			extentTest = report.startTest("Validation of Standard department dropdown options on the screen");
			objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
			objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
			objSurveyQuestionReviewPage= new SurveyQuestionReview().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(),SurveyQuestionReviewPage.class);

			UIValues = objSurveyQuestionReviewPage.validationOfStandardDeptsList(UIValuesDeptNames,SurveyQuestionReviewObjects,extentTest);
					
			//verifying the data in DB
		    String SMSStndDeptOptions = data.getText("SMSStndDeptOptions");
			DBValues = sql.SMSexecuteQuery(getContext(),SMSStndDeptOptions);
			System.out.println("DB Values: " + DBValues);
			
			
			objSurveyQuestionReviewPage.CompareValuesforTwoDimension(extentTest, DBValues, UIValues);
			
			
		}*/
			 
		//Verifying answers saved for a standard department on survey review question screen
		
				@Test(description = "Validation of Answers Saved for a Standard Department on the screen", priority = 6)
				public void validationofAnswersSaved() throws Exception {
					extentTest = report.startTest("Validation of Answers Saved for a Standard Department on the screen");
					objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
					objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
					objSurveyQuestionReviewPage= new SurveyQuestionReview().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(),SurveyQuestionReviewPage.class);
					
					UIValuesStdDeptSelected = objSurveyQuestionReviewPage.validationOfStandardDepts(UIValuesDeptNames,SurveyQuestionReviewObjects,
							getContext().getStringProperty("StndDeptNo"),extentTest);
				
					UIValues = objSurveyQuestionReviewPage.validationOfAnswersUpdated(UIValuesDeptNames,SurveyQuestionReviewObjects,extentTest);
					
					objCommonFunctions.clickButtonWithoutFrame(SurveyQuestionReviewObjects.Save, extentTest, "Survey Answer Details have been saved successfully");
					
					//verifying the data in DB for std dept options
				    String SMSStndDeptSelect = data.getText("SMSStndDeptSelect");
					DBValuesStndDeptSelected = sql.SMSexecuteQuery(getContext(),SMSStndDeptSelect.replace("Store", getContext().getStringProperty("Storeno")));
					
					System.out.println("DB Values: " + DBValuesStndDeptSelected);
							
					//verifying the data in DB
				    String SMSAnswersOptions = data.getText("SMSAnswersOptions");
					DBValues = sql.SMSexecuteQuery(getContext(),SMSAnswersOptions.replace("Store", getContext().getStringProperty("Storeno")));
							
					System.out.println("DB Values: " + DBValues);
					
					objSurveyQuestionReviewPage.CompareValuesforTwoDimension(extentTest, DBValuesStndDeptSelected, UIValuesStdDeptSelected);
					
			    	objSurveyQuestionReviewPage.CompareValuesforTwoDimension(extentTest, DBValues, UIValues);
				 }
				
				/*		
				
				//Adding the row for a apprentice in survey question review
			 

		@Test(description = "Add row selection of Survey question review", priority = 7)
			public void ADDRowSelection() throws Exception {
				extentTest = report.startTest("Selection of Kronos Department");
				objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
				objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
				objSurveyQuestionReviewPage= new SurveyQuestionReview().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(),SurveyQuestionReviewPage.class);

//				objCommonFunctions.verifyMenuSelection(objLoginPageObjects, extentTest,
//						getContext().getStringProperty("MenuSelection"), getContext().getStringProperty("SubSMSMenu9"),
//						LoginPageObjects.smsSubMenuCount, LoginPageObjects.smsSubMenu, LoginPageObjects.smsMenuExpand);
//				objCommonFunctions.clickButton(LoginPageObjects.explorerMenuFrame, LoginPageObjects.SurveyQuestionReview, extentTest, "clicking on Survey Question Review");
//				
			
				objSurveyQuestionReviewPage.search(objSurveyQuestionReviewObjects,SurveyQuestionReviewObjects.StorenoID,extentTest);
				enterText(SurveyQuestionReviewObjects.StorenoID, getContext().getStringProperty("StoreNo_Row")); 

				//objSurveyQuestionReviewPage.search(objSurveyQuestionReviewObjects,SurveyQuestionReviewObjects.Storeno,extentTest);
			
				objCommonFunctions.clickButton(SurveyQuestionReviewObjects.frame,SurveyQuestionReviewObjects.LoadQuestions, extentTest, "Clicking on Load Question Button");
				waitFor(3);
				objCommonFunctions.clickButton(SurveyQuestionReviewObjects.frame,SurveyQuestionReviewObjects.AddRow, extentTest, "Clicking on Load Question Button");
				waitFor(3);
				enterText(SurveyQuestionReviewObjects.EmployeeId, getContext().getStringProperty("EmployeeId")); 
				waitFor(3);
				enterText(SurveyQuestionReviewObjects.name, getContext().getStringProperty("Name")); 
				waitFor(3);
				objSurveyQuestionReviewPage.Add(objSurveyQuestionReviewObjects,SurveyQuestionReviewObjects.tradingDepartment,getContext().getStringProperty("TradingDepartment"),extentTest);	
				waitFor(3);
				enterText(SurveyQuestionReviewObjects.apprenticeStartDate, getContext().getStringProperty("ApprenticeStartDate")); 
				waitFor(3);
				objCommonFunctions.clickButton(SurveyQuestionReviewObjects.frame,SurveyQuestionReviewObjects.Save, extentTest, "Clicking on Save Button");

			}


			
				//Deleting the row for an apprentice in survey question review
			 

			@Test(description = "Delete row selection of Survey question review", priority = 8)
			public void DeleteRow() throws Exception {
				extentTest = report.startTest("Selection of Kronos Department");
				objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
				objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
				objSurveyQuestionReviewPage= new SurveyQuestionReview().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(),SurveyQuestionReviewPage.class);

//				objCommonFunctions.verifyMenuSelection(objLoginPageObjects, extentTest,
//						getContext().getStringProperty("MenuSelection"), getContext().getStringProperty("SubSMSMenu9"),
//						LoginPageObjects.smsSubMenuCount, LoginPageObjects.smsSubMenu, LoginPageObjects.smsMenuExpand);
//				objCommonFunctions.clickButton(LoginPageObjects.explorerMenuFrame, LoginPageObjects.SurveyQuestionReview, extentTest, "clicking on Survey Question Review");

				//objSurveyQuestionReviewPage.search(objSurveyQuestionReviewObjects,SurveyQuestionReviewObjects.Storeno,extentTest);
				
				objSurveyQuestionReviewPage.search(objSurveyQuestionReviewObjects,SurveyQuestionReviewObjects.StorenoID,extentTest);
				waitFor(3);
				enterText(SurveyQuestionReviewObjects.StorenoID, getContext().getStringProperty("StoreNo_Row")); 
				waitFor(3);
				objCommonFunctions.clickButton(SurveyQuestionReviewObjects.frame,SurveyQuestionReviewObjects.LoadQuestions, extentTest, "Clicking on Load Question Button");
				waitFor(3);
				objCommonFunctions.clickButton(SurveyQuestionReviewObjects.frame,SurveyQuestionReviewObjects.DeleteColumn, extentTest, "Clicking on Delete row Button");
				waitFor(3);
				objCommonFunctions.clickButton(SurveyQuestionReviewObjects.frame,SurveyQuestionReviewObjects.DeleteRow, extentTest, "Clicking on Delete row Button");
				
				Alert alert = driver1.switchTo().alert();
				alert.accept();
			}
			
			//1st Script for Manual Testing
			//Error occured for not selecting Apprentice Start Date

			@Test(description = "Error occured for not selecting Apprentice Start Date", priority = 9)
			public void Error_StartDate() throws Exception {
				extentTest = report.startTest("Error occured for not selecting Apprentice Start Date");
				objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
				objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
				objSurveyQuestionReviewPage= new SurveyQuestionReview().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(),SurveyQuestionReviewPage.class);

//				objCommonFunctions.verifyMenuSelection(objLoginPageObjects, extentTest,
//						getContext().getStringProperty("MenuSelection"), getContext().getStringProperty("SubSMSMenu9"),
//						LoginPageObjects.smsSubMenuCount, LoginPageObjects.smsSubMenu, LoginPageObjects.smsMenuExpand);
//				objCommonFunctions.clickButton(LoginPageObjects.explorerMenuFrame, LoginPageObjects.SurveyQuestionReview, extentTest, "clicking on Survey Question Review");
//				
				objSurveyQuestionReviewPage.search(objSurveyQuestionReviewObjects,SurveyQuestionReviewObjects.StorenoID,extentTest);
				enterText(SurveyQuestionReviewObjects.StorenoID, getContext().getStringProperty("StoreNo_Row")); 

				waitFor(3);
				objCommonFunctions.clickButton(SurveyQuestionReviewObjects.frame,SurveyQuestionReviewObjects.LoadQuestions, extentTest, "Clicking on Load Question Button");
				waitFor(3);
				objCommonFunctions.clickButton(SurveyQuestionReviewObjects.frame,SurveyQuestionReviewObjects.AddRow, extentTest, "Clicking on Load Question Button");
				waitFor(3);
				enterText(SurveyQuestionReviewObjects.EmployeeId, getContext().getStringProperty("EmployeeId")); 
				waitFor(3);
				enterText(SurveyQuestionReviewObjects.name, getContext().getStringProperty("Name")); 
				waitFor(3);
				objSurveyQuestionReviewPage.Add(objSurveyQuestionReviewObjects,SurveyQuestionReviewObjects.tradingDepartment,getContext().getStringProperty("TradingDepartment"),extentTest);	
				waitFor(3);

				objCommonFunctions.clickButton(SurveyQuestionReviewObjects.frame,SurveyQuestionReviewObjects.Save, extentTest, "Clicking on Save Button");

			}

			//2nd Script for manual Testing
			//Employee Id entered will be of Numeric and shows warning message "Invalid employee number" for alpha numeric

			@Test(description = "Error occured for Using Alpha Numeric in Employee ID", priority = 10)
			public void Error_EmployeeID() throws Exception {
				extentTest = report.startTest("Error occured for Using Alpha Numeric in Employee ID");
				objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), LoginPage.class);
				objCommonFunctions = new CommonFunctions().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(), CommonFunctions.class);
				objSurveyQuestionReviewPage= new SurveyQuestionReview().createPage(getDriver(), getContext(), log, status, data,getReport(), getReportLogger(),SurveyQuestionReviewPage.class);

//			objCommonFunctions.verifyMenuSelection(objLoginPageObjects, extentTest,
//						getContext().getStringProperty("MenuSelection"), getContext().getStringProperty("SubSMSMenu9"),
//						LoginPageObjects.smsSubMenuCount, LoginPageObjects.smsSubMenu, LoginPageObjects.smsMenuExpand);
//				objCommonFunctions.clickButton(LoginPageObjects.explorerMenuFrame, LoginPageObjects.SurveyQuestionReview, extentTest, "clicking on Survey Question Review");
//				
				objSurveyQuestionReviewPage.search(objSurveyQuestionReviewObjects,SurveyQuestionReviewObjects.StorenoID,extentTest);
				enterText(SurveyQuestionReviewObjects.StorenoID, getContext().getStringProperty("StoreNo_Row")); 

				waitFor(3);
				objCommonFunctions.clickButton(SurveyQuestionReviewObjects.frame,SurveyQuestionReviewObjects.LoadQuestions, extentTest, "Clicking on Load Question Button");
				waitFor(3);
				objCommonFunctions.clickButton(SurveyQuestionReviewObjects.frame,SurveyQuestionReviewObjects.AddRow, extentTest, "Clicking on Load Question Button");
				waitFor(3);
				enterText(SurveyQuestionReviewObjects.EmployeeId, getContext().getStringProperty("EmployeeId_alpha")); 
				waitFor(3);
				enterText(SurveyQuestionReviewObjects.name, getContext().getStringProperty("Name")); 
				waitFor(3);
				objSurveyQuestionReviewPage.Add(objSurveyQuestionReviewObjects,SurveyQuestionReviewObjects.tradingDepartment,getContext().getStringProperty("TradingDepartment"),extentTest);	
				waitFor(3);

				objCommonFunctions.clickButton(SurveyQuestionReviewObjects.frame,SurveyQuestionReviewObjects.Save, extentTest, "Clicking on Save Button");

			}
					
	*/			

	//Logging of the Application

	@Test(priority = 7)
	public void LogoutApplication() throws Exception {
		extentTest = report.startTest("Logging out of application");
		objLoginPage = new LoginPage().createPage(getDriver(), getContext(), log, status, data, getReport(),
				getReportLogger(), LoginPage.class);
		objLoginPage.LogOFF(objLoginPageObjects);
	}

	@BeforeTest
	public void InitiateExtentReport() throws Exception {
		report = new ExtentReports(System.getProperty("user.dir") + "\\Reports\\SurveyQuestionReview.html");
	}

	@AfterTest
	public void CloseExtentReport() throws Exception {
		report.endTest(extentTest);
		report.flush();
	}

	@BeforeMethod
	public void setUpItemPrice(Method m, ITestContext testcontext) throws IOException {

		System.out.println("test1 - beforemethod");
		mName = m.getName().toString().trim();
		System.out.println(m.getName().toString().trim());
		if (!methodList.contains(m.getName().toString().trim())) {
			methodList.add(m.getName().toString().trim());
			//extentTest = report.startTest(m.getName().toString().trim());
		}
		System.out.println(methodList.size());
		//initializeTestcontext();
		System.out.println("test1 - beforemethod");
		log.info("Loading Testdata for the test case: " + m.getName().toString());
		data.getTCNameFromChildren(m.getName().toString().trim());
		testcontext.setAttribute("WebDriver", getDriver());
		testcontext.setAttribute("Customreports", this.customreport);
		customreport.startTest(m.getName().toString());
		initializeTestStatus();
		reportPath = new File(getContext().getStringProperty("reportPath"));
		moduledesc = m.getName().toString().trim();
		dtmoduledesc = m.getAnnotation(Test.class).description();
		testcasesttime = new Date();
		objCommonFunctions = PageFactory.initElements(this.getDriver(), CommonFunctions.class);
		objLoginPage = PageFactory.initElements(this.getDriver(), LoginPage.class);
		objLoginPageObjects = PageFactory.initElements(this.getDriver(), LoginPageObjects.class);
		objSurveyQuestionReviewObjects = PageFactory.initElements(this.getDriver(),SurveyQuestionReviewObjects.class);
		objSurveyQuestionReviewPage = PageFactory.initElements(this.getDriver(), SurveyQuestionReviewPage.class);
		ScreenShotUtil = PageFactory.initElements(this.getDriver(), ExtentReportsScreenshotCode.class);
		BaseObj = PageFactory.initElements(this.getDriver(), BasePage.class);
		System.out.println(System.getProperty("user.dir"));
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("MMddyyyy_hmmss");
		String formattedDate = sdf.format(date);
		System.out.println(formattedDate); // 12/01/2011 4:48:16 PM
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		String formattedDate1 = dateFormat.format(date);
		System.out.println(formattedDate1); // 12/01/2011 4:48:16 PM
		String dat = formattedDate1;
		Report_Header("testcase", reportPath, moduledesc, dat);

	}

	@BeforeClass
	public void loadXMLFile() {
	
		try {
			cName = this.getClass().getSimpleName();
			reportPath = new File(getContext().getStringProperty("reportPath"));
			report = new ExtentReports(
					getContext().getStringProperty("reportPath") + "\\" + this.getClass().getSimpleName() + ".html");
			classList.add(this.getClass().getSimpleName());
			initializeTestcontext();
			sql.SMSConnectSITDB(context);
				
			System.out.println("test1 - Beforeclass");
			data = new XMLDataReader(log);
			customreport = new CustomExtentReports();
		createDriver(getContext().getStringProperty("SMSUrl"), getContext().getStringProperty("browser"), cName,
					mName, extentTest, driver1);
			log.info("Loading data for the class: ");
			data.loadTestDataXML(System.getProperty("user.dir") + "\\TestData\\SMSApplication\\SMSUItoDBCompare.xml");
			customreport.createExtentReport();
			
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

